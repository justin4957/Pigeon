searchData={"items":[{"type":"module","title":"Pigeon","doc":"Pigeon - Generic Distributed Work Processing Framework\n\nA minimal interface for spinning up configurable EC2 instances with\ncontainerized work processors for concurrent validation and processing\nagainst a centralized control node.","ref":"Pigeon.html"},{"type":"module","title":"Architecture - Pigeon","doc":"- **Control Node**: Local development machine coordinating tasks\n- **Worker Nodes**: EC2 instances running containers with work processors\n- **Communication**: Centralized hub-and-spoke pattern\n- **Workload**: Configurable via validator modules","ref":"Pigeon.html#module-architecture"},{"type":"module","title":"Usage - Pigeon","doc":"# Deploy cluster\n    pigeon deploy --nodes 3\n\n    # Process work with G-expression validator\n    pigeon process --work-file data.json --validator Pigeon.Validators.GExpressionValidator\n\n    # Process work with custom validator\n    pigeon process --work-file code.txt --validator MyApp.CodeValidator --workers 3","ref":"Pigeon.html#module-usage"},{"type":"module","title":"Examples - Pigeon","doc":"# Deploy a cluster (requires AWS infrastructure)\n    # {:ok, cluster_info} = Pigeon.deploy_cluster(nodes: 2)\n    # {:ok, %{control_node: :local@node, workers: [...]}}\n\n    # Process work using a validator (requires running cluster)\n    # work_data = \"{\\\"g\\\": \\\"lit\\\", \\\"v\\\": 42}\"\n    # {:ok, results} = Pigeon.process_work(work_data, Pigeon.Validators.GExpressionValidator)\n    # {:ok, %{success_rate: 1.0, total_runs: 1, ...}}\n\n    # Validate a validator module\n    iex> Pigeon.validate_validator(Pigeon.Validators.GExpressionValidator)\n    {:ok, :valid}\n\n    # Submit work for processing\n    pigeon process --work-file \"data.txt\" --validator MyApp.CodeValidator --workers 3\n\n    # Monitor cluster status\n    pigeon status\n\n    # Scale cluster\n    pigeon scale --nodes 5\n\n    # Shutdown cluster\n    pigeon destroy","ref":"Pigeon.html#module-examples"},{"type":"module","title":"Validator Modules - Pigeon","doc":"Pigeon accepts any module implementing the `Pigeon.Work.Validator` behavior:\n\n    defmodule MyApp.CustomValidator do\n      @behaviour Pigeon.Work.Validator\n\n      def validate(work_string, opts) do\n        # Process work_string and return result\n        {:ok, result}\n      end\n\n      def validate_batch(work_items, opts) do\n        # Process multiple work items\n        {:ok, results}\n      end\n\n      def metadata() do\n        %{\n          name: \"Custom Validator\",\n          version: \"1.0.0\",\n          description: \"Processes custom work formats\",\n          supported_formats: [\"text\", \"json\"]\n        }\n      end\n    end","ref":"Pigeon.html#module-validator-modules"},{"type":"function","title":"Pigeon.cluster_status/0","doc":"Get the current cluster status.","ref":"Pigeon.html#cluster_status/0"},{"type":"function","title":"Examples - Pigeon.cluster_status/0","doc":"# Get cluster status (requires running cluster)\n    # {:ok, status} = Pigeon.cluster_status()\n    # {:ok, %{cluster_status: :running, active_workers: 3, total_workers: 3, ...}}","ref":"Pigeon.html#cluster_status/0-examples"},{"type":"function","title":"Pigeon.deploy_cluster/1","doc":"Deploy a cluster of worker nodes.","ref":"Pigeon.html#deploy_cluster/1"},{"type":"function","title":"Options - Pigeon.deploy_cluster/1","doc":"- `:nodes` - Number of worker nodes to deploy (default: 2)\n- `:instance_type` - EC2 instance type (default: \"t3.medium\")\n- `:region` - AWS region (default: \"us-west-2\")","ref":"Pigeon.html#deploy_cluster/1-options"},{"type":"function","title":"Examples - Pigeon.deploy_cluster/1","doc":"# Deploy cluster with custom options\n    # {:ok, cluster_info} = Pigeon.deploy_cluster(nodes: 3, instance_type: \"t3.large\")\n    # {:ok, %{control_node: :node@local, workers: [...], total_workers: 3}}","ref":"Pigeon.html#deploy_cluster/1-examples"},{"type":"function","title":"Pigeon.destroy_cluster/0","doc":"Destroy the entire cluster and clean up resources.","ref":"Pigeon.html#destroy_cluster/0"},{"type":"function","title":"Examples - Pigeon.destroy_cluster/0","doc":"# Destroy cluster (requires running cluster)\n    # {:ok, _result} = Pigeon.destroy_cluster()\n    # {:ok, %{destroyed_workers: 3, cleanup_status: :complete}}","ref":"Pigeon.html#destroy_cluster/0-examples"},{"type":"function","title":"Pigeon.list_validators/0","doc":"List available validator modules in the system.","ref":"Pigeon.html#list_validators/0"},{"type":"function","title":"Examples - Pigeon.list_validators/0","doc":"# List available validators\n    # {:ok, validators} = Pigeon.list_validators()\n    # {:ok, [\"Pigeon.Validators.GExpressionValidator\", \"MyApp.CustomValidator\"]}","ref":"Pigeon.html#list_validators/0-examples"},{"type":"function","title":"Pigeon.process_work/3","doc":"Submit work for distributed processing using a validator module.","ref":"Pigeon.html#process_work/3"},{"type":"function","title":"Parameters - Pigeon.process_work/3","doc":"- `work_data` - String containing the work data to process\n- `validator_module` - Module implementing `Pigeon.Work.Validator` behavior\n- `opts` - Optional configuration (workers, iterations, timeout)","ref":"Pigeon.html#process_work/3-parameters"},{"type":"function","title":"Examples - Pigeon.process_work/3","doc":"# Process work with a validator (requires running cluster)\n    # work_data = \"{\\\"g\\\": \\\"lit\\\", \\\"v\\\": 42}\"\n    # {:ok, results} = Pigeon.process_work(work_data, Pigeon.Validators.GExpressionValidator)\n    # {:ok, %{success_rate: 1.0, total_runs: 1, errors: 0, ...}}","ref":"Pigeon.html#process_work/3-examples"},{"type":"function","title":"Pigeon.process_work_batch/3","doc":"Submit batch work for distributed processing.","ref":"Pigeon.html#process_work_batch/3"},{"type":"function","title":"Parameters - Pigeon.process_work_batch/3","doc":"- `work_items` - List of work data strings to process\n- `validator_module` - Module implementing `Pigeon.Work.Validator` behavior\n- `opts` - Optional configuration (workers, iterations, timeout)","ref":"Pigeon.html#process_work_batch/3-parameters"},{"type":"function","title":"Examples - Pigeon.process_work_batch/3","doc":"# Process batch work (requires running cluster)\n    # work_items = [\"work1\", \"work2\", \"work3\"]\n    # {:ok, results} = Pigeon.process_work_batch(work_items, MyApp.Validator)\n    # {:ok, %{total_runs: 3, success_rate: 1.0, batch_count: 1, ...}}","ref":"Pigeon.html#process_work_batch/3-examples"},{"type":"function","title":"Pigeon.scale_cluster/1","doc":"Scale cluster up or down to the target number of nodes.","ref":"Pigeon.html#scale_cluster/1"},{"type":"function","title":"Examples - Pigeon.scale_cluster/1","doc":"# Scale cluster (requires running cluster)\n    # {:ok, result} = Pigeon.scale_cluster(5)\n    # {:ok, %{added: 2, removed: 0, total: 5}}","ref":"Pigeon.html#scale_cluster/1-examples"},{"type":"function","title":"Pigeon.validate_validator/1","doc":"Validate that a module properly implements the `Pigeon.Work.Validator` behavior.","ref":"Pigeon.html#validate_validator/1"},{"type":"function","title":"Examples - Pigeon.validate_validator/1","doc":"iex> Pigeon.validate_validator(Pigeon.Validators.GExpressionValidator)\n    {:ok, :valid}\n\n    iex> Pigeon.validate_validator(String)\n    {:error, {:missing_callbacks, [validate: 2, validate_batch: 2, metadata: 0]}}","ref":"Pigeon.html#validate_validator/1-examples"},{"type":"module","title":"Pigeon.CLI","doc":"Command Line Interface for Pigeon distributed AI framework.\n\nAdapted from Grapple CLI components for infrastructure management.","ref":"Pigeon.CLI.html"},{"type":"function","title":"Pigeon.CLI.main/1","doc":"","ref":"Pigeon.CLI.html#main/1"},{"type":"module","title":"Pigeon.Cluster.Manager","doc":"Cluster management for Pigeon worker nodes.\nAdapted from Grapple's distributed coordination.","ref":"Pigeon.Cluster.Manager.html"},{"type":"function","title":"Pigeon.Cluster.Manager.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Pigeon.Cluster.Manager.html#child_spec/1"},{"type":"function","title":"Pigeon.Cluster.Manager.deploy_cluster/1","doc":"","ref":"Pigeon.Cluster.Manager.html#deploy_cluster/1"},{"type":"function","title":"Pigeon.Cluster.Manager.destroy_cluster/0","doc":"","ref":"Pigeon.Cluster.Manager.html#destroy_cluster/0"},{"type":"function","title":"Pigeon.Cluster.Manager.get_status/0","doc":"","ref":"Pigeon.Cluster.Manager.html#get_status/0"},{"type":"function","title":"Pigeon.Cluster.Manager.init/1","doc":"Callback implementation for  GenServer.init/1 .","ref":"Pigeon.Cluster.Manager.html#init/1"},{"type":"function","title":"Pigeon.Cluster.Manager.register_worker/1","doc":"","ref":"Pigeon.Cluster.Manager.html#register_worker/1"},{"type":"function","title":"Pigeon.Cluster.Manager.scale_to/1","doc":"","ref":"Pigeon.Cluster.Manager.html#scale_to/1"},{"type":"function","title":"Pigeon.Cluster.Manager.start_link/1","doc":"","ref":"Pigeon.Cluster.Manager.html#start_link/1"},{"type":"function","title":"Pigeon.Cluster.Manager.worker_heartbeat/2","doc":"","ref":"Pigeon.Cluster.Manager.html#worker_heartbeat/2"},{"type":"module","title":"Pigeon.Communication.Hub","doc":"Centralized communication hub for coordinating with worker nodes.\nImplements hub-and-spoke pattern for distributed work processing.","ref":"Pigeon.Communication.Hub.html"},{"type":"function","title":"Pigeon.Communication.Hub.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Pigeon.Communication.Hub.html#child_spec/1"},{"type":"function","title":"Pigeon.Communication.Hub.distribute_work/1","doc":"","ref":"Pigeon.Communication.Hub.html#distribute_work/1"},{"type":"function","title":"Pigeon.Communication.Hub.get_job_status/1","doc":"","ref":"Pigeon.Communication.Hub.html#get_job_status/1"},{"type":"function","title":"Pigeon.Communication.Hub.init/1","doc":"Callback implementation for  GenServer.init/1 .","ref":"Pigeon.Communication.Hub.html#init/1"},{"type":"function","title":"Pigeon.Communication.Hub.register_worker/1","doc":"","ref":"Pigeon.Communication.Hub.html#register_worker/1"},{"type":"function","title":"Pigeon.Communication.Hub.start_link/1","doc":"","ref":"Pigeon.Communication.Hub.html#start_link/1"},{"type":"function","title":"Pigeon.Communication.Hub.submit_job/1","doc":"","ref":"Pigeon.Communication.Hub.html#submit_job/1"},{"type":"function","title":"Pigeon.Communication.Hub.worker_heartbeat/2","doc":"","ref":"Pigeon.Communication.Hub.html#worker_heartbeat/2"},{"type":"function","title":"Pigeon.Communication.Hub.worker_result/3","doc":"","ref":"Pigeon.Communication.Hub.html#worker_result/3"},{"type":"module","title":"Pigeon.Config","doc":"Configuration management for Pigeon.","ref":"Pigeon.Config.html"},{"type":"function","title":"Pigeon.Config.ensure_aws_config/0","doc":"","ref":"Pigeon.Config.html#ensure_aws_config/0"},{"type":"function","title":"Pigeon.Config.get_default_config/0","doc":"","ref":"Pigeon.Config.html#get_default_config/0"},{"type":"module","title":"Pigeon.Infrastructure.EC2Manager","doc":"EC2 infrastructure management for Pigeon workers.","ref":"Pigeon.Infrastructure.EC2Manager.html"},{"type":"function","title":"Pigeon.Infrastructure.EC2Manager.deploy_instances/1","doc":"","ref":"Pigeon.Infrastructure.EC2Manager.html#deploy_instances/1"},{"type":"function","title":"Pigeon.Infrastructure.EC2Manager.get_instance_status/1","doc":"","ref":"Pigeon.Infrastructure.EC2Manager.html#get_instance_status/1"},{"type":"function","title":"Pigeon.Infrastructure.EC2Manager.terminate_instances/1","doc":"","ref":"Pigeon.Infrastructure.EC2Manager.html#terminate_instances/1"},{"type":"module","title":"Pigeon.Jobs.JobManager","doc":"GenServer for managing and tracking distributed jobs in Pigeon.\n\nHandles job lifecycle, status tracking, and result aggregation\nfor work processing across the cluster.","ref":"Pigeon.Jobs.JobManager.html"},{"type":"function","title":"Pigeon.Jobs.JobManager.add_job_result/3","doc":"","ref":"Pigeon.Jobs.JobManager.html#add_job_result/3"},{"type":"function","title":"Pigeon.Jobs.JobManager.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Pigeon.Jobs.JobManager.html#child_spec/1"},{"type":"function","title":"Pigeon.Jobs.JobManager.create_job/1","doc":"","ref":"Pigeon.Jobs.JobManager.html#create_job/1"},{"type":"function","title":"Pigeon.Jobs.JobManager.get_job/1","doc":"","ref":"Pigeon.Jobs.JobManager.html#get_job/1"},{"type":"function","title":"Pigeon.Jobs.JobManager.init/1","doc":"Callback implementation for  GenServer.init/1 .","ref":"Pigeon.Jobs.JobManager.html#init/1"},{"type":"function","title":"Pigeon.Jobs.JobManager.list_jobs/0","doc":"","ref":"Pigeon.Jobs.JobManager.html#list_jobs/0"},{"type":"function","title":"Pigeon.Jobs.JobManager.start_link/1","doc":"","ref":"Pigeon.Jobs.JobManager.html#start_link/1"},{"type":"function","title":"Pigeon.Jobs.JobManager.update_job_status/2","doc":"","ref":"Pigeon.Jobs.JobManager.html#update_job_status/2"},{"type":"module","title":"Pigeon.Validators.GExpressionValidator","doc":"G-expression validator implementation for Pigeon.\n\nValidates G-expressions (generalized expressions) which are JSON-based\nrepresentations of functional programs. This validator can check syntax,\nsemantic correctness, and perform equivalence testing.","ref":"Pigeon.Validators.GExpressionValidator.html"},{"type":"module","title":"Pigeon.Work.Processor","doc":"Generic work processor for distributed work validation and processing.\n\nHandles coordination between validator modules and worker nodes,\nproviding a unified interface for any type of distributed work processing.","ref":"Pigeon.Work.Processor.html"},{"type":"function","title":"Pigeon.Work.Processor.list_validators/0","doc":"List available validator modules in the system.","ref":"Pigeon.Work.Processor.html#list_validators/0"},{"type":"function","title":"Pigeon.Work.Processor.process_batch_distributed/3","doc":"Process multiple work items in batch mode using the specified validator.","ref":"Pigeon.Work.Processor.html#process_batch_distributed/3"},{"type":"function","title":"Pigeon.Work.Processor.process_distributed/3","doc":"Process work data using the specified validator module across distributed workers.","ref":"Pigeon.Work.Processor.html#process_distributed/3"},{"type":"function","title":"Parameters - Pigeon.Work.Processor.process_distributed/3","doc":"- `work_data` - String containing the work data to process\n- `validator_module` - Module implementing `Pigeon.Work.Validator` behavior\n- `opts` - Optional configuration (workers, iterations, timeout)","ref":"Pigeon.Work.Processor.html#process_distributed/3-parameters"},{"type":"function","title":"Examples - Pigeon.Work.Processor.process_distributed/3","doc":"iex> # This would require a running cluster in practice\n    iex> # Pigeon.Work.Processor.process_distributed(\"test_work\", MyValidator, workers: 2)\n    iex> # {:ok, %{success_rate: 1.0, total_runs: 2, ...}}","ref":"Pigeon.Work.Processor.html#process_distributed/3-examples"},{"type":"behaviour","title":"Pigeon.Work.Validator","doc":"Behavior for work validators in Pigeon.\n\nWork validators define how to process and validate arbitrary work strings\nsent to remote nodes. This abstraction allows Pigeon to be used for any\ndistributed work processing scenario.","ref":"Pigeon.Work.Validator.html"},{"type":"behaviour","title":"Example Implementations - Pigeon.Work.Validator","doc":"- G-expression validation\n- Code compilation testing\n- Data transformation validation\n- Machine learning model inference\n- Text processing and analysis","ref":"Pigeon.Work.Validator.html#module-example-implementations"},{"type":"callback","title":"Pigeon.Work.Validator.generate_test_cases/2","doc":"Generates test cases for the validator.","ref":"Pigeon.Work.Validator.html#c:generate_test_cases/2"},{"type":"callback","title":"Parameters - Pigeon.Work.Validator.generate_test_cases/2","doc":"- `count`: Number of test cases to generate\n- `opts`: Optional configuration for test generation","ref":"Pigeon.Work.Validator.html#c:generate_test_cases/2-parameters"},{"type":"callback","title":"Returns - Pigeon.Work.Validator.generate_test_cases/2","doc":"List of test work strings","ref":"Pigeon.Work.Validator.html#c:generate_test_cases/2-returns"},{"type":"callback","title":"Pigeon.Work.Validator.metadata/0","doc":"Returns metadata about the validator.","ref":"Pigeon.Work.Validator.html#c:metadata/0"},{"type":"callback","title":"Returns - Pigeon.Work.Validator.metadata/0","doc":"Map containing validator information:\n- `name`: Human readable validator name\n- `version`: Validator version\n- `description`: What this validator does\n- `supported_formats`: List of supported input formats","ref":"Pigeon.Work.Validator.html#c:metadata/0-returns"},{"type":"callback","title":"Pigeon.Work.Validator.validate/2","doc":"Validates a work string and returns a result.","ref":"Pigeon.Work.Validator.html#c:validate/2"},{"type":"callback","title":"Parameters - Pigeon.Work.Validator.validate/2","doc":"- `work_string`: The raw work data as a string\n- `opts`: Optional configuration for the validator","ref":"Pigeon.Work.Validator.html#c:validate/2-parameters"},{"type":"callback","title":"Returns - Pigeon.Work.Validator.validate/2","doc":"- `{:ok, result}` - Success with validation result\n- `{:error, reason}` - Validation failure with reason","ref":"Pigeon.Work.Validator.html#c:validate/2-returns"},{"type":"callback","title":"Examples - Pigeon.Work.Validator.validate/2","doc":"iex> defmodule SimpleValidator do\n    ...>   @behaviour Pigeon.Work.Validator\n    ...>   def validate(\"valid\", _opts), do: {:ok, %{status: :valid}}\n    ...>   def validate(\"invalid\", _opts), do: {:error, %{message: \"Invalid work\"}}\n    ...>   def validate_batch(items, opts), do: {:ok, Enum.map(items, &validate(&1, opts))}\n    ...>   def metadata(), do: %{name: \"Simple\", version: \"1.0.0\", description: \"Test\", supported_formats: [\"text\"]}\n    ...> end\n    iex> SimpleValidator.validate(\"valid\", [])\n    {:ok, %{status: :valid}}","ref":"Pigeon.Work.Validator.html#c:validate/2-examples"},{"type":"callback","title":"Pigeon.Work.Validator.validate_batch/2","doc":"Processes work in batch mode.","ref":"Pigeon.Work.Validator.html#c:validate_batch/2"},{"type":"callback","title":"Parameters - Pigeon.Work.Validator.validate_batch/2","doc":"- `work_items`: List of work strings to process\n- `opts`: Optional configuration for batch processing","ref":"Pigeon.Work.Validator.html#c:validate_batch/2-parameters"},{"type":"callback","title":"Returns - Pigeon.Work.Validator.validate_batch/2","doc":"- `{:ok, results}` - Success with list of results\n- `{:error, reason}` - Batch processing failure","ref":"Pigeon.Work.Validator.html#c:validate_batch/2-returns"},{"type":"function","title":"Pigeon.Work.Validator.load_validator/1","doc":"Loads and validates a validator module from string.","ref":"Pigeon.Work.Validator.html#load_validator/1"},{"type":"function","title":"Pigeon.Work.Validator.validate_implementation/1","doc":"Helper function to validate that a module implements the Validator behavior.","ref":"Pigeon.Work.Validator.html#validate_implementation/1"},{"type":"function","title":"Examples - Pigeon.Work.Validator.validate_implementation/1","doc":"iex> defmodule TestValidator do\n    ...>   @behaviour Pigeon.Work.Validator\n    ...>   def validate(_work, _opts), do: {:ok, %{}}\n    ...>   def validate_batch(_items, _opts), do: {:ok, []}\n    ...>   def metadata(), do: %{name: \"Test\", version: \"1.0.0\", description: \"Test\", supported_formats: []}\n    ...> end\n    iex> Pigeon.Work.Validator.validate_implementation(TestValidator)\n    {:ok, :valid}","ref":"Pigeon.Work.Validator.html#validate_implementation/1-examples"},{"type":"extras","title":"Pigeon 🕊️","doc":"# Pigeon 🕊️\n\n**Generic Distributed Work Processing Framework**\n\nPigeon is a minimal CLI interface for spinning up configurable EC2 instances with containerized work processors for concurrent validation and processing against a centralized control node.","ref":"readme.html"},{"type":"extras","title":"Architecture - Pigeon 🕊️","doc":"```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   Control Node  │    │  Worker Node 1  │    │  Worker Node N  │\n│   (Local Dev)   │◄──►│   EC2 + Ollama  │    │   EC2 + Ollama  │\n│                 │    │   + CodeLlama   │    │   + CodeLlama   │\n│  • Job Queue    │    │                 │    │                 │\n│  • Results Agg  │    │  • Work Proc    │ .. │  • Work Proc    │\n│  • Coordination │    │  • Validation   │    │  • Validation   │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n```","ref":"readme.html#architecture"},{"type":"extras","title":"Features - Pigeon 🕊️","doc":"### 🚀 **Infrastructure Management**\n- One-command EC2 cluster deployment\n- Automatic Ollama/CodeLlama container setup\n- Dynamic scaling (add/remove nodes)\n- Terraform-like infrastructure as code\n\n### 🧪 **Generic Work Processing**\n- Pluggable validator modules for any work type\n- Distributed processing and validation\n- Concurrent work execution across multiple nodes\n- Built-in result aggregation and error handling\n\n### 🕸️ **Centralized Coordination**\n- Hub-and-spoke communication pattern\n- Job queue and work distribution\n- Real-time status monitoring\n- Automatic failover and retry logic\n\n### 📊 **Built-in Analytics**\n- Success rate tracking across workers\n- Performance timing analysis\n- Error aggregation and reporting\n- Worker health monitoring","ref":"readme.html#features"},{"type":"extras","title":"Quick Start - Pigeon 🕊️","doc":"","ref":"readme.html#quick-start"},{"type":"extras","title":"Prerequisites - Pigeon 🕊️","doc":"- AWS CLI configured with appropriate permissions\n- Elixir 1.15+\n- Docker/Podman (for local development)","ref":"readme.html#prerequisites"},{"type":"extras","title":"Installation - Pigeon 🕊️","doc":"```bash\ngit clone https://github.com/your-org/pigeon.git\ncd pigeon\nmix deps.get\nmix escript.build\n```","ref":"readme.html#installation"},{"type":"extras","title":"Basic Usage - Pigeon 🕊️","doc":"```bash\n# Deploy a 3-node cluster\n./pigeon deploy --nodes 3 --instance-type t3.medium --region us-west-2\n\n# Process work using G-expression validator\n./pigeon process --work-file examples/fibonacci.json --validator Pigeon.Validators.GExpressionValidator --workers 3 --iterations 5\n\n# Check cluster status\n./pigeon status --detailed\n\n# Scale up to 5 nodes\n./pigeon scale --nodes 5\n\n# Destroy everything\n./pigeon destroy --force\n```","ref":"readme.html#basic-usage"},{"type":"extras","title":"Validator Modules - Pigeon 🕊️","doc":"Pigeon accepts any module implementing the `Pigeon.Work.Validator` behavior:\n\n```elixir\ndefmodule MyApp.CustomValidator do\n  @behaviour Pigeon.Work.Validator\n\n  def validate(work_string, opts) do\n    # Process work_string and return result\n    {:ok, result}\n  end\n\n  def validate_batch(work_items, opts) do\n    # Process multiple work items\n    {:ok, results}\n  end\n\n  def metadata() do\n    %{\n      name: \"Custom Validator\",\n      version: \"1.0.0\",\n      description: \"Processes custom work formats\",\n      supported_formats: [\"text\", \"json\"]\n    }\n  end\nend\n```","ref":"readme.html#validator-modules"},{"type":"extras","title":"Use Cases - Pigeon 🕊️","doc":"","ref":"readme.html#use-cases"},{"type":"extras","title":"1. G-Expression Validation - Pigeon 🕊️","doc":"Validate G-expressions (functional program representations):\n\n```bash\n./pigeon process \\\n  --work-file my-function.json \\\n  --validator Pigeon.Validators.GExpressionValidator \\\n  --workers 4 \\\n  --iterations 10\n```","ref":"readme.html#1-g-expression-validation"},{"type":"extras","title":"2. Custom Code Validation - Pigeon 🕊️","doc":"Process any type of work with custom validators:\n\n```bash\n./pigeon process \\\n  --work-file source-code.txt \\\n  --validator MyApp.CodeValidator \\\n  --workers 6 \\\n  --iterations 5\n```","ref":"readme.html#2-custom-code-validation"},{"type":"extras","title":"3. Batch Processing - Pigeon 🕊️","doc":"Process large datasets in parallel:\n\n```bash\n./pigeon process \\\n  --work-file batch-data.json \\\n  --validator MyApp.DataProcessor \\\n  --workers 8\n```","ref":"readme.html#3-batch-processing"},{"type":"extras","title":"Configuration - Pigeon 🕊️","doc":"","ref":"readme.html#configuration"},{"type":"extras","title":"AWS Setup - Pigeon 🕊️","doc":"Pigeon requires AWS credentials and permissions for EC2, VPC, and Security Groups:\n\n```bash\nexport AWS_ACCESS_KEY_ID=your_key\nexport AWS_SECRET_ACCESS_KEY=your_secret\nexport AWS_DEFAULT_REGION=us-west-2\n```","ref":"readme.html#aws-setup"},{"type":"extras","title":"Instance Types - Pigeon 🕊️","doc":"Recommended instance types based on workload:\n\n- **t3.medium**: Light processing (2 vCPU, 4GB RAM)\n- **t3.large**: Standard workloads (2 vCPU, 8GB RAM)\n- **c5.xlarge**: CPU-intensive tasks (4 vCPU, 8GB RAM)\n- **m5.xlarge**: Memory-intensive processing (4 vCPU, 16GB RAM)","ref":"readme.html#instance-types"},{"type":"extras","title":"Architecture Details - Pigeon 🕊️","doc":"","ref":"readme.html#architecture-details"},{"type":"extras","title":"Reused Components from Grapple - Pigeon 🕊️","doc":"Pigeon adapts several battle-tested components from the Grapple distributed graph database:\n\n- **Cluster Management**: From `Grapple.Distributed.ClusterManager`\n- **Node Discovery**: From `Grapple.Distributed.Discovery`\n- **Health Monitoring**: From `Grapple.Distributed.HealthMonitor`\n- **CLI Framework**: From `Grapple.CLI.Shell`","ref":"readme.html#reused-components-from-grapple"},{"type":"extras","title":"Communication Protocol - Pigeon 🕊️","doc":"- **Hub-and-Spoke**: Control node coordinates all worker communication\n- **HTTP/JSON**: RESTful API for worker registration and job submission\n- **Heartbeat System**: Workers send status updates every 30 seconds\n- **Graceful Failures**: Automatic job reassignment on worker failures","ref":"readme.html#communication-protocol"},{"type":"extras","title":"Container Stack - Pigeon 🕊️","doc":"Each worker node runs:\n\n```yaml\nservices:\n  ollama:\n    image: ollama/ollama:latest\n    ports: [\"11434:11434\"]\n\n  pigeon-worker:\n    build: containers/worker\n    ports: [\"8080:8080\"]\n    depends_on: [ollama]\n\n  model-init:\n    image: ollama/ollama:latest\n    command: [\"ollama\", \"pull\", \"codellama:7b\"]\n```","ref":"readme.html#container-stack"},{"type":"extras","title":"API Reference - Pigeon 🕊️","doc":"","ref":"readme.html#api-reference"},{"type":"extras","title":"CLI Commands - Pigeon 🕊️","doc":"#### `deploy`\nDeploy EC2 worker cluster\n- `--nodes, -n`: Number of worker nodes (default: 2)\n- `--instance-type, -t`: EC2 instance type (default: t3.medium)\n- `--region, -r`: AWS region (default: us-west-2)\n- `--key-name, -k`: EC2 key pair name\n\n#### `process`\nSubmit work for distributed processing\n- `--work-file, -f`: File containing work data to process (required)\n- `--validator, -v`: Validator module to use for processing (required)\n- `--workers, -w`: Number of workers to use for processing\n- `--iterations, -i`: Processing iterations per worker (default: 5)\n\n#### `status`\nShow cluster status\n- `--detailed, -d`: Show detailed worker information\n\n#### `scale`\nScale cluster up or down\n- `--nodes, -n`: Target number of nodes (required)\n\n#### `destroy`\nDestroy entire cluster\n- `--force, -f`: Skip confirmation prompt","ref":"readme.html#cli-commands"},{"type":"extras","title":"Programmatic API - Pigeon 🕊️","doc":"```elixir\n# Deploy cluster\n{:ok, cluster_info} = Pigeon.deploy_cluster(nodes: 4, instance_type: \"t3.large\")\n\n# Process work with validator\n{:ok, results} = Pigeon.process_work(work_data, MyApp.Validator, workers: 3, iterations: 10)\n\n# Process batch work\n{:ok, results} = Pigeon.process_work_batch(work_items, MyApp.Validator, workers: 3)\n\n# Check status\n{:ok, status} = Pigeon.cluster_status()\n\n# Scale cluster\n{:ok, _} = Pigeon.scale_cluster(6)\n\n# Cleanup\n{:ok, _} = Pigeon.destroy_cluster()\n```","ref":"readme.html#programmatic-api"},{"type":"extras","title":"Validator Behavior API - Pigeon 🕊️","doc":"All validators must implement the `Pigeon.Work.Validator` behavior:\n\n```elixir\n@callback validate(work_string :: String.t(), opts :: keyword()) ::\n  {:ok, result :: any()} | {:error, reason :: any()}\n\n@callback validate_batch(work_items :: [String.t()], opts :: keyword()) ::\n  {:ok, results :: [any()]} | {:error, reason :: any()}\n\n@callback metadata() :: %{\n  name: String.t(),\n  version: String.t(),\n  description: String.t(),\n  supported_formats: [String.t()]\n}\n\n@callback generate_test_cases(count :: integer(), opts :: keyword()) :: [String.t()]\n```","ref":"readme.html#validator-behavior-api"},{"type":"extras","title":"Built-in Validators - Pigeon 🕊️","doc":"","ref":"readme.html#built-in-validators"},{"type":"extras","title":"G-Expression Validator - Pigeon 🕊️","doc":"Validates G-expressions (generalized functional program representations):\n\n```bash\n./pigeon process \\\n  --work-file fibonacci.json \\\n  --validator Pigeon.Validators.GExpressionValidator \\\n  --workers 3\n```\n\nSupports:\n- Syntax validation\n- Semantic analysis\n- Variable binding checks\n- Test case generation","ref":"readme.html#g-expression-validator"},{"type":"extras","title":"Development - Pigeon 🕊️","doc":"","ref":"readme.html#development"},{"type":"extras","title":"Running Locally - Pigeon 🕊️","doc":"For development and testing without AWS:\n\n```bash\n# Start control node\nmix run --no-halt\n\n# In separate terminal, simulate workers\ndocker-compose -f containers/compose.yml up\n```","ref":"readme.html#running-locally"},{"type":"extras","title":"Testing - Pigeon 🕊️","doc":"```bash\n# Run unit tests\nmix test\n\n# Run integration tests (requires AWS)\nmix test --include integration\n\n# Run with coverage\nmix test --cover\n\n# Generate documentation\nmix docs\n```","ref":"readme.html#testing"},{"type":"extras","title":"Building Containers - Pigeon 🕊️","doc":"```bash\n# Build worker container\ndocker build -f containers/worker/Dockerfile -t pigeon/worker:latest .\n\n# Build and push to registry\ndocker build -t your-registry/pigeon-worker:v1.0 .\ndocker push your-registry/pigeon-worker:v1.0\n```","ref":"readme.html#building-containers"},{"type":"extras","title":"Creating Custom Validators - Pigeon 🕊️","doc":"1. Implement the `Pigeon.Work.Validator` behavior\n2. Add validation logic for your work type\n3. Include metadata describing your validator\n4. Optionally implement test case generation\n\nExample:\n\n```elixir\ndefmodule MyProject.JsonValidator do\n  @behaviour Pigeon.Work.Validator\n\n  def validate(json_string, _opts) do\n    case Jason.decode(json_string) do\n      {:ok, _data} -> {:ok, %{valid: true}}\n      {:error, reason} -> {:error, %{message: \"Invalid JSON: #{reason}\"}}\n    end\n  end\n\n  def validate_batch(json_strings, opts) do\n    results = Enum.map(json_strings, &validate(&1, opts))\n    {:ok, results}\n  end\n\n  def metadata do\n    %{\n      name: \"JSON Validator\",\n      version: \"1.0.0\",\n      description: \"Validates JSON syntax\",\n      supported_formats: [\"json\"]\n    }\n  end\n\n  def generate_test_cases(count, _opts) do\n    Enum.map(1..count, fn i ->\n      Jason.encode!(%{\"test\" => i, \"valid\" => true})\n    end)\n  end\nend\n```","ref":"readme.html#creating-custom-validators"},{"type":"extras","title":"Contributing - Pigeon 🕊️","doc":"1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request","ref":"readme.html#contributing"},{"type":"extras","title":"License - Pigeon 🕊️","doc":"MIT License - see LICENSE file for details.","ref":"readme.html#license"},{"type":"extras","title":"Acknowledgments - Pigeon 🕊️","doc":"- **Grapple**: For distributed infrastructure components\n- **Ollama**: For local AI model serving\n- **CodeLlama**: For code generation capabilities\n- **Melas**: For validation patterns and inspiration","ref":"readme.html#acknowledgments"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.4"}}